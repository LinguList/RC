scale_shape_manual(values = c('Women' = 17, 'Men' = 16))
ggplot(c_l, aes(language, corr, fill = checked)) +
geom_bar(stat = "identity") +
geom_linerange(aes(ymax=upper.ci, ymin=lower.ci)) +
geom_point(data=c_l, mapping=aes(x=language, y=p.corr), size=2, shape = 17) +
geom_point(data=c_l, mapping=aes(x=language, y=mono.cor), size=2, shape = 16) +
geom_point(data=c_l, mapping=aes(x=language, y=open.cor), size=2, shape = 15) +
geom_hline(y=mean(c_l$corr),lty=2) +
ylab("Pearson's r") +
xlab("Language") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())  +
theme(axis.title.x = element_text( size=25), axis.text.x  = element_text( size=10),
axis.title.y = element_text( size=25), axis.text.y  = element_text( size=10)) +
theme(legend.text = element_text(size = 10), legend.title = element_text(size = 10)) +
theme(axis.line = element_line(color = 'black'))+
scale_fill_manual(values=c("pink", "red")) +
#theme(legend.position="none") +
scale_y_continuous(limits = c(-.07, .75))
ggplot(c_l, aes(language, corr, fill = checked)) +
geom_bar(stat = "identity") +
geom_linerange(aes(ymax=upper.ci, ymin=lower.ci)) +
geom_point(data=c_l, mapping=aes(x=language, y=p.corr), size=2, shape = 17) +
geom_point(data=c_l, mapping=aes(x=language, y=mono.cor), size=2, shape = 16) +
geom_point(data=c_l, mapping=aes(x=language, y=open.cor), size=2, shape = 15) +
geom_hline(y=mean(c_l$corr),lty=2) +
ylab("Pearson's r") +
xlab("Language") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())  +
theme(axis.title.x = element_text( size=25), axis.text.x  = element_text( size=10),
axis.title.y = element_text( size=25), axis.text.y  = element_text( size=10)) +
theme(legend.text = element_text(size = 10), legend.title = element_text(size = 10)) +
theme(axis.line = element_line(color = 'black'))+
scale_fill_manual(values=c("pink", "red")) +
theme(legend.position="none") +
scale_y_continuous(limits = c(-.07, .75))
```
if (savePlots) {pdf("figure/xling.pdf", height = 6, width = 12)}
ggplot(c_l, aes(language, corr, fill = checked)) +
geom_bar(stat = "identity") +
geom_linerange(aes(ymax=upper.ci, ymin=lower.ci)) +
geom_point(data=c_l, mapping=aes(x=language, y=p.corr), size=2, shape = 17) +
geom_point(data=c_l, mapping=aes(x=language, y=mono.cor), size=2, shape = 16) +
geom_point(data=c_l, mapping=aes(x=language, y=open.cor), size=2, shape = 15) +
geom_hline(y=mean(c_l$corr), lty=2) +
ylab("Pearson's r") +
xlab("Language") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank())  +
theme(axis.title.x = element_text(size=25), axis.text.x  = element_text( size=10),
axis.title.y = element_text(size=25), axis.text.y  = element_text( size=10)) +
theme(legend.text = element_text(size = 10), legend.title = element_text(size = 10)) +
theme(axis.line = element_line(color = 'black'))+
scale_fill_manual(values=c("pink", "red")) +
theme(legend.position="none") +
scale_y_continuous(limits = c(-.07, .75))
if(savePlots){dev.off()}
head(c_l)
tail(c_l)
mean(c_l$corr)
mean(c_l$mono.corr)
mean(c_l$mono.cor)
mean(c_l$open.cor)
mean(c_l$p.corr)
lens = c(which(grepl("LEN",names(xling)))) # get length column indices
xling_len = xling[, lens]
names(xling_len) = as.character(tolower(lapply(str_split(names(xling_len),"_"),function(x) {x[1]})))
cmat = cor(xling_len, use = "pairwise.complete.obs")
cmat
test <- structure(list(id = c(13, 27), seq = structure(list(
`1` = c("1997", "1997", "1997", "2007"),
`2` = c("2007", "2007", "2007", "2007", "2007", "2007", "2007")),
.Names = c("1", "2"))), .Names = c("penr",
"seq"), row.names = c("1", "2"), class = "data.frame")
test
cmat = ifelse(cmat == 1, 0 , cmat)
cmat
cmat = ifelse(cmat == 1, NA , cmat)
## Correlations between all lengths, all words
xling_len = xling[, lens]
names(xling_len) = as.character(tolower(lapply(str_split(names(xling_len),"_"),function(x) {x[1]})))
# Correlations between all lengths
cmat = cor(xling_len, use = "pairwise.complete.obs")
cmat = ifelse(cmat == 1, NA , cmat) #get rid of correlations within same lang
mean(cmat)
## Correlations between all lengths, all words
xling_len = xling[, lens]
names(xling_len) = as.character(tolower(lapply(str_split(names(xling_len),"_"),function(x) {x[1]})))
# Correlations between all lengths
cmat = cor(xling_len, use = "pairwise.complete.obs")
cmat = ifelse(cmat == 1, NA , cmat) #get rid of correlations within same lang
cmat
mean(cmat, rm.na = TRUE)
?mean
mean(cmat, na.rm = TRUE)
xling = read.csv("data/xling_csv.csv")
xling
head(xling)
xling.eng
head(xling.eng)
eng = read.csv("data/englishComplexityNorms.csv")
head(eng)
rg_norms = read.csv("data/rtNormsGeons_BYITEM.csv")
rg_norms
rg_norms$obj <- as.factor(as.numeric(gsub("[[:punct:]]", "", rg_norms$obj)))
rg_norms$obj_class = substr(rg_norms$obj, 1, 1)
rg_norms$obj_item = substr(rg_norms$obj, 2, 2)
head(rg_norms)
ms <- aggregate(log.rt  ~ obj_class, data=rg_norms, mean)
ms$n <- aggregate(log.rt  ~ obj_class, data=d, n.unique)$workerid
ms$cih <- aggregate(log.rt  ~ obj_class, data=d, ci.high)$log.rt
ms$cil <- aggregate(log.rt  ~ obj_class, data=d, ci.low)$log.rt
ms <- aggregate(log.rt  ~ obj_class, data=rg_norms, mean)
ms$cih <- aggregate(log.rt  ~ obj_class, data=rg_norms, ci.high)$log.rt
ms$cil <- aggregate(log.rt  ~ obj_class, data=rg_norms, ci.low)$log.rt
ms
# plot
ggplot(ms, aes(y=log.rt, x=as.numeric(obj_class))) +
geom_errorbar(data=ms, mapping=aes(x=obj_class, ymax = log.rt+cih,
ymin=log.rt-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=objCondition, y=log.rt), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Log RT (ms)")
# plot
ggplot(ms, aes(y=log.rt, x=as.numeric(obj_class))) +
geom_errorbar(data=ms, mapping=aes(x=obj_class, ymax = log.rt+cih,
ymin=log.rt-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=obj_class, y=log.rt), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Log RT (ms)")
cor.test(rg_norms$rt_meanRating, rg_norms$meanRating)
rg_norms
cor.test(rg_norms$obj_class, rg_norms$log.rt)
head(rg_norms)
summary(rg_norms)
rg_norms$obj_class = as.numeric(rg_norms$obj_class)
rg_norms$obj_class = as.numeric(rg_norms$obj_class)
cor.test(rg_norms$obj_class, rg_norms$log.rt)
cg_norms = read.csv("data/complicatedNormsGeons_BYITEM.csv")
cg_norms$obj <- as.factor(as.numeric(gsub("[[:punct:]]", "", cg_norms$obj)))
cg_norms$obj_class = as.numeric(substr(cg_norms$obj, 1, 1))
cg_norms$obj_item = as.numeric(substr(cg_norms$obj, 2, 2))
head(cg_norms)
# remove quotes from norms
cg_norms$obj <- as.factor(as.numeric(gsub("[[:punct:]]", "", cg_norms$obj)))
cg_norms$obj_class = as.numeric(substr(cg_norms$obj, 1, 1))
cg_norms$obj_item = as.numeric(substr(cg_norms$obj, 2, 2))
ms <- aggregate(meanRating  ~ obj_class, data=cg_norms, mean)
ms$cih <- aggregate(meanRating  ~ obj_class, data=cg_norms, ci.high)$meanRating
ms$cil <- aggregate(meanRating  ~ obj_class, data=cg_norms, ci.low)$meanRating
# plot
ggplot(ms, aes(y=meanRating.rt, x=as.numeric(obj_class))) +
geom_errorbar(data=ms, mapping=aes(x=obj_class, ymax = meanRating+cih,
ymin=meanRating-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=obj_class, y=meanRating), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Complexity rating")
# plot
ggplot(ms, aes(y=meanRating, x=as.numeric(obj_class))) +
geom_errorbar(data=ms, mapping=aes(x=obj_class, ymax = meanRating+cih,
ymin=meanRating-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=obj_class, y=meanRating), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Complexity rating")
```
# make object class numeric
cg_norms$obj_class = as.numeric(cg_norms$obj_class)
# correlation between num geons and complexity
cor.test(cg_norms$obj_class, rg_norms$meanRating)
cor.test(cg_norms$obj_class, cg_norms$meanRating)
index <- match(cg_norms$obj, rg_norms$obj)
cg_norms$rt_meanRating <- rg_norms$log.rt[index]
# correlation between RT and complexity
cor.test(rg_norms$rt_meanRating, rg_norms$meanRating)
head(cg_norms)
cor.test(cg_norms$rt_meanRating, cg_norms$meanRating)
head(cg_norms)
cg_norms
show(geon_c_plot)
fs = 25
rs = 8
# complexity ratio
geon_c_plot = ggplot(de, aes(y=effect_size, x=c.Mratio)) +
geom_pointrange( aes(ymax = cill, ymin=ciul))+
geom_hline(yintercept=0,lty=2) +
stat_smooth(method="lm") +
#geom_text(aes(c.Mratio + .05, effect_size, label=objCondition2)) +
ylab("effect size (Cohen's d)") +
xlab("complexity rating ratio") +
theme(text = element_text(size=fs))  +
scale_y_continuous(limits = c(-.33, .66)) +
scale_x_continuous(limits = c(.25, 1.29)) +
annotate("text", x=1.15, y=.5, color = "red", size = rs,
label=paste("r=",round(cor(de$effect_size, de$c.Mratio), 2))) +
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
geon_c_plot
dc <- read.csv('data/RC38_long.csv')
head(dc)
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid, variable, trial, FUN = seq_along))
dc <- dcast(workerid + seq + trial ~ variable, data = md, value.var = "value")
dc$seq <- NULL
head(dc)
# make everything factors
dc$criticalComplicated <- as.factor(dc$criticalComplicated)
dc$criticalSimple <- as.factor(dc$criticalSimple)
dc$langCondition <- as.factor(dc$langCondition)
dc$objCondition <- as.factor(dc$objCondition)
dc$response <- as.factor(dc$response)
dc$responseSide <- as.factor(dc$responseSide)
dc$responseValue  <- as.factor(dc$responseValue)
dc$word <- as.factor(dc$word)
index <- match(dc$criticalSimple, cg_norms$obj)
index
head(cg_norms)
head(dc)
d <- read.csv("data/RefComplex34.results",sep="\t",header=TRUE)
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=names(d)[grepl("obj",names(d))])
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$obj <- unlist(matrix(lapply(str_split(md$value,"j"),function(x) {x[2]})))
md$obj <- unlist(matrix(lapply(str_split(md$obj,".p"),function(x) {x[1]})))
md$complexityLevel <- unlist(matrix(lapply(str_split(md$obj,"-"),function(x) {x[1]})))
md$objID <- unlist(matrix(lapply(str_split(md$obj,"-"),function(x) {x[2]})))
md$value <- NULL; md$variable <- NULL
md = md[(md$trial != 0 & md$trial != 1),] # remove ball and circuit
head(md)
d <- read.csv("data/RefComplex34.results",sep="\t",header=TRUE)
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=names(d)[grepl("obj",names(d))])
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
head(md)
md$obj <- unlist(matrix(lapply(str_split(md$value,"j"),function(x) {x[2]})))
head(md)
tail(md)
md$obj <- unlist(matrix(lapply(str_split(md$obj,".p"),function(x) {x[1]})))
tail(md)
md$complexityLevel <- unlist(matrix(lapply(str_split(md$obj,"-"),function(x) {x[1]})))
md$objID <- unlist(matrix(lapply(str_split(md$obj,"-"),function(x) {x[2]})))
md$value <- NULL; md$variable <- NULL
md = md[(md$trial != 0 & md$trial != 1),] # remove ball and circuit
head(md)
# get rating info
mdr <- melt(d,id.vars=c("workerid"),measure.vars=names(d)[grepl("rating",names(d))])
mdr$trial <- matrix(lapply(str_split(mdr$variable,"_"),function(x) {x[2]}))
mdr$variable <- NULL
# merge together based on trial and workerid
m = merge(md,mdr,by=c("workerid","trial"))
m$value <- as.numeric(as.character(m$value))
# get norms by objects
ms_all <- aggregate(value ~ obj, data=m, mean)
ms_all$cih <- aggregate(value ~ obj, data=m, ci.high)$value
ms_all$cil <- aggregate(value ~ obj, data=m, ci.low)$value
names(ms_all)[2] = "meanRating"
ms_all <- ms_all[order(ms_all$meanRating),]
head(ms_all)
# read in data
d <- read.csv("data/RefComplex34.results",sep="\t",header=TRUE)
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=names(d)[grepl("obj",names(d))])
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$obj <- unlist(matrix(lapply(str_split(md$value,"j"),function(x) {x[2]})))
md$obj <- unlist(matrix(lapply(str_split(md$obj,".p"),function(x) {x[1]})))
md$complexityLevel <- unlist(matrix(lapply(str_split(md$obj,"-"),function(x) {x[1]})))
md$objID <- unlist(matrix(lapply(str_split(md$obj,"-"),function(x) {x[2]})))
md$value <- NULL; md$variable <- NULL
md = md[(md$trial != 0 & md$trial != 1),] # remove ball and circuit
# get rating info
mdr <- melt(d,id.vars=c("workerid"),measure.vars=names(d)[grepl("rating",names(d))])
mdr$trial <- matrix(lapply(str_split(mdr$variable,"_"),function(x) {x[2]}))
mdr$variable <- NULL
# merge together based on trial and workerid
m = merge(md,mdr,by=c("workerid","trial"))
m$value <- as.numeric(as.character(m$value))
# get norms by objects
ms_all <- aggregate(value ~ obj, data=m, mean)
ms_all$cih <- aggregate(value ~ obj, data=m, ci.high)$value
ms_all$cil <- aggregate(value ~ obj, data=m, ci.low)$value
names(ms_all)[2] = "meanRating"
ms_all <- ms_all[order(ms_all$meanRating),]
# save complexity by item
write.csv(ms_all, "data/complicatedNormsGeons_BYITEM.csv")
}
cg_norms = read.csv("data/complicatedNormsGeons_BYITEM.csv")
cg_norms
# remove quotes from norms
cg_norms$obj <- as.factor(as.numeric(gsub("[[:punct:]]", "", cg_norms$obj)))
cg_norms$obj_class = as.numeric(substr(cg_norms$obj, 1, 1))
cg_norms$obj_item = as.numeric(substr(cg_norms$obj, 2, 2))
ms <- aggregate(meanRating  ~ obj_class, data=cg_norms, mean)
ms$cih <- aggregate(meanRating  ~ obj_class, data=cg_norms, ci.high)$meanRating
ms$cil <- aggregate(meanRating  ~ obj_class, data=cg_norms, ci.low)$meanRating
# plot
ggplot(ms, aes(y=meanRating, x=as.numeric(obj_class))) +
geom_errorbar(data=ms, mapping=aes(x=obj_class, ymax = meanRating+cih,
ymin=meanRating-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=obj_class, y=meanRating), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Complexity rating") +
ggtitle("complexity norm vs. number of geons")
cg_norms$obj_class = as.numeric(cg_norms$obj_class)
cor.test(cg_norms$obj_class, cg_norms$meanRating)
rg_norms = read.csv("data/rtNormsGeons_BYITEM.csv")
rg_norms
mdr <- melt(d,id.vars=c("workerid"),measure.vars=names(d)[grepl("rating",names(d))])
mdr
head(md)
head(mdr)
head(md)
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid, variable, trial, FUN = seq_along))
dc <- dcast(workerid + seq + trial ~ variable, data = md, value.var = "value")
dc$seq <- NULL
# make everything factors
dc$criticalComplicated <- as.factor(dc$criticalComplicated)
dc$criticalSimple <- as.factor(dc$criticalSimple)
dc$langCondition <- as.factor(dc$langCondition)
dc$objCondition <- as.factor(dc$objCondition)
dc$response <- as.factor(dc$response)
dc$responseSide <- as.factor(dc$responseSide)
dc$responseValue  <- as.factor(dc$responseValue)
dc$word <- as.factor(dc$word)
head(dc)
# merge in norms
# complicated
index <- match(dc$criticalSimple, cg_norms$obj)
index
head(dc$criticalSimple)
head(cg_norms$obj)
head(cg_norms)
cg_norms = read.csv("data/complicatedNormsGeons_BYITEM.csv")
head(cg_norms)
# remove quotes from norms
cg_norms$obj2 <- as.factor(as.numeric(gsub("[[:punct:]]", "", cg_norms$obj)))
cg_norms$obj_class = as.numeric(substr(cg_norms$obj2, 1, 1))
cg_norms$obj_item = as.numeric(substr(cg_norms$obj2, 2, 2))
ms <- aggregate(meanRating  ~ obj_class, data=cg_norms, mean)
ms$cih <- aggregate(meanRating  ~ obj_class, data=cg_norms, ci.high)$meanRating
ms$cil <- aggregate(meanRating  ~ obj_class, data=cg_norms, ci.low)$meanRating
# plot
ggplot(ms, aes(y=meanRating, x=as.numeric(obj_class))) +
geom_errorbar(data=ms, mapping=aes(x=obj_class, ymax = meanRating+cih,
ymin=meanRating-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=obj_class, y=meanRating), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Complexity rating") +
ggtitle("complexity norm vs. number of geons")
# make object class numeric
cg_norms$obj_class = as.numeric(cg_norms$obj_class)
# correlation between num geons and complexity
cor.test(cg_norms$obj_class, cg_norms$meanRating)
head(cg_norms)
head(cg_norms$obj)
index <- match(dc$criticalSimple, cg_norms$obj)
index
head(dc$criticalSimple)
dc$criticalComplicated  <- as.factor(as.numeric(gsub("[[:punct:]]", "",dc$criticalComplicated )))
head(dc$criticalSimple)
dc$criticalComplicated  <- as.factor(as.numeric(gsub("[[:punct:]]", "", dc$criticalComplicated)))
head(dc$criticalSimple)
head(dc$criticalComplicated)
rg_norms = read.csv("data/rtNormsGeons_BYITEM.csv")
cg_norms = read.csv("data/complicatedNormsGeons_BYITEM.csv")
# remove quotes from norms
cg_norms$obj <- as.factor(as.numeric(gsub("[[:punct:]]", "", cg_norms$obj)))
cg_norms$obj_class = as.numeric(substr(cg_norms$obj, 1, 1))
cg_norms$obj_item = as.numeric(substr(cg_norms$obj, 2, 2))
ms <- aggregate(meanRating  ~ obj_class, data=cg_norms, mean)
ms$cih <- aggregate(meanRating  ~ obj_class, data=cg_norms, ci.high)$meanRating
ms$cil <- aggregate(meanRating  ~ obj_class, data=cg_norms, ci.low)$meanRating
# plot
ggplot(ms, aes(y=meanRating, x=as.numeric(obj_class))) +
geom_errorbar(data=ms, mapping=aes(x=obj_class, ymax = meanRating+cih,
ymin=meanRating-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=obj_class, y=meanRating), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Complexity rating") +
ggtitle("complexity norm vs. number of geons")
# make object class numeric
cg_norms$obj_class = as.numeric(cg_norms$obj_class)
# correlation between num geons and complexity
cor.test(cg_norms$obj_class, cg_norms$meanRating)
rg_norms = read.csv("data/rtNormsGeons_BYITEM.csv")
rg_norms$obj <- as.factor(as.numeric(gsub("[[:punct:]]", "", rg_norms$obj)))
rg_norms$obj_class = substr(rg_norms$obj, 1, 1)
rg_norms$obj_item = substr(rg_norms$obj, 2, 2)
ms <- aggregate(log.rt  ~ obj_class, data=rg_norms, mean)
ms$cih <- aggregate(log.rt  ~ obj_class, data=rg_norms, ci.high)$log.rt
ms$cil <- aggregate(log.rt  ~ obj_class, data=rg_norms, ci.low)$log.rt
# plot
ggplot(ms, aes(y=log.rt, x=as.numeric(obj_class))) +
geom_errorbar(data=ms, mapping=aes(x=obj_class, ymax = log.rt+cih,
ymin=log.rt-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=obj_class, y=log.rt), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Log RT (ms)") +
ggtitle("RT vs. number of geons")
rg_norms$obj_class = as.numeric(rg_norms$obj_class)
head(rg_norms)
head(cg_norms)
index <- match(cg_norms$obj, rg_norms$obj)
cg_norms$rt_meanRating <- rg_norms$log.rt[index]
cor.test(cg_norms$rt_meanRating, cg_norms$meanRating)
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid, variable, trial, FUN = seq_along))
dc <- dcast(workerid + seq + trial ~ variable, data = md, value.var = "value")
dc$seq <- NULL
head(dc)
# make everything factors
dc$criticalComplicated  <- as.factor(as.numeric(gsub("[[:punct:]]", "", dc$criticalComplicated))) #strip punctuations
dc$criticalSimple  <- as.factor(as.numeric(gsub("[[:punct:]]", "", dc$criticalSimple))) #strip punctuations
dc$langCondition <- as.factor(dc$langCondition)
dc$objCondition <- as.factor(dc$objCondition)
dc$response <- as.factor(dc$response)
dc$responseSide <- as.factor(dc$responseSide)
dc$responseValue  <- as.factor(dc$responseValue)
dc$word <- as.factor(dc$word)
head(dc)
head(dc$criticalSimple)
head(cg_norms$obj)
index <- match(dc$criticalSimple, cg_norms$obj)
index
? lme4
sessionInfo()
install.packages('lme4')
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
sessionInfo()
library(lme4)
sessionInfo()
co_norms = read.csv("data/complicatedNormsObjs_BYITEM.csv")
cor.test(co_norms$rating_1, co_norms$rating_2)
mdb <- melt(db[db$workerid != 'A1BQEX75BE1AYE',],id.vars=c("workerid"),measure.vars=names(db)[grepl("rating",names(db))])
library(corrplot)
library(stringr)
library(psych)
library(ggplot2)
library(boot)
co_norms = read.csv("data/complicatedNormsObjs_BYITEM.csv")
mdb <- melt(db[db$workerid != 'A1BQEX75BE1AYE',],id.vars=c("workerid"),measure.vars=names(db)[grepl("rating",names(db))])
