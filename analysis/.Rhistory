boxplot(raw$Answer.correct)
raw = raw[raw$Answer.correct > 20, ]
# prep data frame
# accuracy data frame
# melt
n <- names(raw)
cols = c( n[grepl("test",n)])
mda <- melt(raw,id.vars=c("workerid"), measure.vars=cols,na.rm=TRUE)
mda$trial <-as.numeric(matrix(lapply(str_split(mda$variable,"_"),function(x) {x[3]})))
mda$var1 <- matrix(lapply(str_split(mda$variable,"_"),function(x) {x[1]}))
mda$var2 <- matrix(lapply(str_split(mda$variable,"_"),function(x) {x[2]}))
mda$var <- paste(mda$var1, mda$var2, sep = "_")
mda$variable <- NULL; mda$var1 <- NULL; mda$var2 <- NULL
mda$seq <- with(mda, ave(value, workerid, var, FUN = seq_along))
da = dcast(workerid + seq + trial ~ var, data = mda, value.var = "value")
da$seq <- NULL
da=da[!is.na(da$trial),]
da$Answer.test_answer = as.factor(da$Answer.test_answer)
da$Answer.test_answerEval = as.factor(da$Answer.test_answerEval)
da$Answer.test_image  = as.factor(da$Answer.test_image)
# look at memory performance (correct: CR or hit)
numCR = length(which(da$Answer.test_answerEval == "\"CR\""))
numH = length(which(da$Answer.test_answerEval == "\"H\""))
correct = (numCR + numH)/ dim(da)[1]
correct
# get obj condition variable
da$test_image2 <- as.character(matrix(lapply(str_split(da$Answer.test_image,"j"), function(x) {x[2]})))
da$objCondition <- as.factor(as.character(matrix(lapply(str_split(da$test_image2,"-"), function(x) {x[1]}))))
da$objItem <- as.character(matrix(lapply(str_split(da$test_image2,"-"), function(x) {x[2]})))
da$objItem<- as.factor(as.numeric(gsub("[[:punct:]]", "", da$objItem)))
# RT dataframe
# melt
n <- names(raw)
cols = c(n[grepl("train", n)])
cols = cols[1:40]
md <- melt(raw, id.vars=c("workerid"), measure.vars=cols)
md$trial <- as.numeric(matrix(lapply(str_split(md$variable,"_"),function(x) {x[3]})))
md$var1 <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]}))
md$var2 <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$var <- paste(md$var1, md$var2, sep = "_")
md$variable <- NULL; md$var1 <- NULL; md$var2 <- NULL
md$seq <- with(md, ave(value, workerid, var, FUN = seq_along))
d = dcast(workerid + seq + trial ~ var, data = md, value.var = "value")
d$Answer.train_NA <- NULL; d$seq <- NULL
d=d[!is.na(d$trial),]
d=d[!is.na(d$Answer.train_image),]
d=d[!is.na(d$Answer.train_rt),]
d=d[d$Answer.train_image != "undefined",]
d=d[d$Answer.train_image != "",]
d$Answer.train_rt = as.numeric(d$Answer.train_rt)
# exclude outlier 2 standard deviations above and below mean (in log space)
d$log.rt = log(d$Answer.train_rt)
total = dim(d)[1]
sd2 = 2*sd(d$log.rt)
d = d[(d$log.rt > (mean(d$log.rt) - sd2)) & (d$log.rt < (mean(d$log.rt) + sd2)),]
print(paste("percent trimmed:" , round((total - dim(d)[1])/total,2)))
hist(d$log.rt)
# get obj condition
d = d[d$trial > 1,] # exclude anchors (not interesting because order not randomized)
d$train_image2 <- as.character(matrix(lapply(str_split(d$Answer.train_image,"j"), function(x) {x[2]})))
d$objCondition <- as.factor(as.character(matrix(lapply(str_split(d$train_image2,"-"), function(x) {x[1]}))))
d$objItem <- as.character(matrix(lapply(str_split(d$train_image2,"-"), function(x) {x[2]})))
d$objItem<- as.factor(as.numeric(gsub("[[:punct:]]", "", d$objItem)))
d$obj <- paste("\"", d$objCondition, "-" ,d$objItem,"\"", sep = "" )
# RT by condition
ms <- aggregate(log.rt  ~ objCondition, data=d, mean)
ms$n <- aggregate(log.rt  ~ objCondition, data=d, n.unique)$workerid
ms$cih <- aggregate(log.rt  ~ objCondition, data=d, ci.high)$log.rt
ms$cil <- aggregate(log.rt  ~ objCondition, data=d, ci.low)$log.rt
ms$objCondition  = as.numeric(ms$objCondition)
# plot
ggplot(ms, aes(y=log.rt, x=as.numeric(objCondition))) +
geom_errorbar(data=ms, mapping=aes(x=objCondition, ymax = log.rt+cih,
ymin=log.rt-cil), width=0.2, size=1, color="black") +
geom_point(data=ms, mapping=aes(x=objCondition, y=log.rt), size=6)  +
geom_line() +
xlab("Object Condition") +
ylab("Log RT (ms)")
# rt by item
ms_all <- aggregate(log.rt  ~ obj, data=d, mean)
ms_all$cih <- aggregate(log.rt ~ obj, data=d, ci.high)$log.rt
ms_all$cil <- aggregate(log.rt ~ obj, data=d, ci.low)$log.rt
# save RT by item
write.csv(ms_all, "data/rtNormsGeons_BYITEM.csv")
}
rg_norms = read.csv("data/rtNormsGeons_BYITEM.csv")
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
summary(d)
dim(d)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
head(d)
dim(d)
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime.y"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid,  variable, trial, FUN = seq_along))
dc = dcast(workerid + assignmentaccepttime.y + seq + trial ~ variable, data = md, value.var = "value")
dc$seq <- NULL
# make everything factors
dc$criticalComplicated <- as.factor(dc$criticalComplicated)
dc$criticalSimple <- as.factor(dc$criticalSimple)
dc$langCondition <- as.factor(dc$langCondition)
dc$objCondition <- as.factor(dc$objCondition)
dc$response <- as.factor(dc$response)
dc$responseSide <- as.factor(dc$responseSide)
dc$responseValue  <- as.factor(dc$responseValue)
dc$word <- as.factor(dc$word)
# merge in norms
# complicated
index <- match(dc$criticalSimple, cg_norms$obj)
dc$criticalSimple_c.norms <- cg_norms$meanRating[index]
index <- match(dc$criticalComplicated,cg_norms$obj)
dc$criticalComplicated_c.norms <- cg_norms$meanRating[index]
# rt
index <- match(dc$criticalSimple, rg_norms$obj)
dc$criticalSimple_rt.norms <- rg_norms$log.rt [index]
index <- match(dc$criticalComplicated, rg_norms$obj)
dc$criticalComplicated_rt.norms <- rg_norms$log.rt [index]
dc$c.ratio = dc$criticalSimple_c.norms/dc$criticalComplicated_c.norms
dc$rt.ratio = dc$criticalSimple_rt.norms/dc$criticalComplicated_rt.norms
```
* get effect sizes
```{r include = FALSE}
de <- ddply(dc, .(objCondition), function (d) {d.fc(d)})
```
* get obj conds
```{r  include = FALSE}
de$cond1 <- as.factor(unlist(matrix(lapply(str_split(de$objCondition ,"-"),function(x) {x[1]}))))
de$cond2 <- as.factor(unlist(matrix(lapply(str_split(de$objCondition ,"-"),function(x) {x[2]}))))
de$cond1<- as.factor(gsub("[[:punct:]]", "", de$cond1))
de$cond2<- as.numeric(gsub("[[:punct:]]", "", de$cond2))
de$objCondition2 = paste(de$cond1, "/", de$cond2, sep = "")
```
de <- NULL
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime.y"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid,  variable, trial, FUN = seq_along))
dc = dcast(workerid + assignmentaccepttime.y + seq + trial ~ variable, data = md, value.var = "value")
dc$seq <- NULL
# make everything factors
dc$criticalComplicated <- as.factor(dc$criticalComplicated)
dc$criticalSimple <- as.factor(dc$criticalSimple)
dc$langCondition <- as.factor(dc$langCondition)
dc$objCondition <- as.factor(dc$objCondition)
dc$response <- as.factor(dc$response)
dc$responseSide <- as.factor(dc$responseSide)
dc$responseValue  <- as.factor(dc$responseValue)
dc$word <- as.factor(dc$word)
# merge in norms
# complicated
index <- match(dc$criticalSimple, cg_norms$obj)
dc$criticalSimple_c.norms <- cg_norms$meanRating[index]
index <- match(dc$criticalComplicated,cg_norms$obj)
dc$criticalComplicated_c.norms <- cg_norms$meanRating[index]
# rt
index <- match(dc$criticalSimple, rg_norms$obj)
dc$criticalSimple_rt.norms <- rg_norms$log.rt [index]
index <- match(dc$criticalComplicated, rg_norms$obj)
dc$criticalComplicated_rt.norms <- rg_norms$log.rt [index]
dc$c.ratio = dc$criticalSimple_c.norms/dc$criticalComplicated_c.norms
dc$rt.ratio = dc$criticalSimple_rt.norms/dc$criticalComplicated_rt.norms
```
* get effect sizes
```{r include = FALSE}
de <- ddply(dc, .(objCondition), function (d) {d.fc(d)})
```
* get obj conds
```{r  include = FALSE}
de$cond1 <- as.factor(unlist(matrix(lapply(str_split(de$objCondition ,"-"),function(x) {x[1]}))))
de$cond2 <- as.factor(unlist(matrix(lapply(str_split(de$objCondition ,"-"),function(x) {x[2]}))))
de$cond1<- as.factor(gsub("[[:punct:]]", "", de$cond1))
de$cond2<- as.numeric(gsub("[[:punct:]]", "", de$cond2))
de$objCondition2 = paste(de$cond1, "/", de$cond2, sep = "")
```
head(de)
fs = 25
rs = 8
# complexity ratio
ggplot(de, aes(y=effect_size, x=c.Mratio)) +
geom_pointrange( aes(ymax = cill, ymin=ciul))+
geom_hline(yintercept=0,lty=2) +
stat_smooth(method="lm") +
geom_text(aes(c.Mratio + .05, effect_size, label=objCondition2)) +
ylab("effect size (cohen's d)") +
xlab("complexity rating ratio") +
theme(text = element_text(size=fs))  +
scale_y_continuous(limits = c(-.33, .66)) +
annotate("text", x=1., y=.5, color = "red", size = rs,
label=paste("r=",round(cor(de$effect_size, de$c.Mratio), 2))) +
theme(plot.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
de
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime.y"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime.y"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
de
index <- match(dc$criticalSimple, rg_norms$obj)
dc$criticalSimple_rt.norms <- rg_norms$log.rt [index]
index <- match(dc$criticalComplicated, rg_norms$obj)
dc$criticalComplicated_rt.norms <- rg_norms$log.rt [index]
summary(dc)
md$seq <- with(md, ave(value, workerid,  variable, trial, FUN = seq_along))
dc = dcast(workerid + assignmentaccepttime.y + seq + trial ~ variable, data = md, value.var = "value")
dc$seq <- NULL
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
summary(md)
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid,  variable, trial, FUN = seq_along))
dc = dcast(workerid + assignmentaccepttime.y + seq + trial ~ variable, data = md, value.var = "value")
dc$seq <- NULL
# make everything factors
dc$criticalComplicated <- as.factor(dc$criticalComplicated)
dc$criticalSimple <- as.factor(dc$criticalSimple)
dc$langCondition <- as.factor(dc$langCondition)
dc$objCondition <- as.factor(dc$objCondition)
dc$response <- as.factor(dc$response)
dc$responseSide <- as.factor(dc$responseSide)
dc$responseValue  <- as.factor(dc$responseValue)
dc$word <- as.factor(dc$word)
# merge in norms
# complicated
index <- match(dc$criticalSimple, cg_norms$obj)
dc$criticalSimple_c.norms <- cg_norms$meanRating[index]
index <- match(dc$criticalComplicated,cg_norms$obj)
dc$criticalComplicated_c.norms <- cg_norms$meanRating[index]
# rt
index <- match(dc$criticalSimple, rg_norms$obj)
dc$criticalSimple_rt.norms <- rg_norms$log.rt [index]
index <- match(dc$criticalComplicated, rg_norms$obj)
dc$criticalComplicated_rt.norms <- rg_norms$log.rt [index]
dc$c.ratio = dc$criticalSimple_c.norms/dc$criticalComplicated_c.norms
dc$rt.ratio = dc$criticalSimple_rt.norms/dc$criticalComplicated_rt.norms
de <- ddply(dc, .(objCondition), function (d) {d.fc(d)})
de
head(dc)
# make everything factors
dc$criticalComplicated <- as.factor(dc$criticalComplicated)
dc$criticalSimple <- as.factor(dc$criticalSimple)
dc$langCondition <- as.factor(dc$langCondition)
dc$objCondition <- as.factor(dc$objCondition)
dc$response <- as.factor(dc$response)
dc$responseSide <- as.factor(dc$responseSide)
dc$responseValue  <- as.factor(dc$responseValue)
dc$word <- as.factor(dc$word)
index <- match(dc$criticalSimple, cg_norms$obj)
index
head(dc)
head(cg_norms)
head(dc)
head(ms_all)
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid,  variable, trial, FUN = seq_along))
dc = dcast(workerid + assignmentaccepttime + seq + trial ~ variable, data = md, value.var = "value")
dc$seq <- NULL
md$seq <- with(md, ave(value, workerid,  variable, trial, FUN = seq_along))
head(md)
md$seq <- with(md, ave(value, workerid,  variable, trial, FUN = seq_along))
warnings()
dc = dcast(workerid + assignmentaccepttime + seq + trial ~ variable, data = md, value.var = "value")
summary(dc)
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
summary(md)
md$seq <- with(md, ave(value, workerid, variable, trial, FUN = seq_along))
summary(md)
rm(list = setdiff(ls(), lsf.str()))
summary(md)
cg_norms = read.csv("data/complicatedNormsGeons_BYITEM.csv")
rg_norms = read.csv("data/rtNormsGeons_BYITEM.csv")
# read in data
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
whichSubjRemove == 'keepAll'
# read in data
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
head(d)
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid,  variable, trial, FUN = seq_along))
summary(md$seq)
summary(md)
md <- melt(d,id.vars=c("workerid", "assignmentaccepttime"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
summary(md)
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
summary(md)
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
summary(md)
head(md)
geon = med
geon = md
dc <-  read.csv("data/RC35_long.csv")
dc$criticalComplicated= gsub(" ", "", gsub("[[:punct:]]", "", dc$criticalComplicated))
dc$criticalSimple= gsub(" ", "", gsub("[[:punct:]]", "", dc$criticalSimple))
dc$criticalComplicated <- as.factor(dc$criticalComplicated)
dc$criticalSimple <- as.factor(dc$criticalSimple)
dc$langCondition <- as.factor(dc$langCondition)
dc$objCondition <- as.factor(dc$objCondition)
dc$response <- as.factor(dc$response)
dc$responseSide <- as.factor(dc$responseSide)
dc$responseValue<- as.factor(dc$responseValue)
dc$word <- as.factor(dc$word)
dc$trial <- as.numeric(dc$trial)
index <- match(dc$criticalSimple, co_norms$ratingNum)
dc$criticalSimple_c.norms <- co_norms$meanRating[index]
index <- match(dc$criticalComplicated, co_norms$ratingNum)
dc$criticalComplicated_c.norms <- co_norms$meanRating[index]
index <- match(dc$criticalSimple, rto_norms$Answer.train_image)
dc$criticalSimple_rt.norms <- rto_norms$log.rt [index]
index <- match(dc$criticalComplicated, rto_norms$Answer.train_image)
dc$criticalComplicated_rt.norms <- rto_norms$log.rt [index]
dc$c.ratio = dc$criticalSimple_c.norms/dc$criticalComplicated_c.norms
dc$rt.ratio = dc$criticalSimple_rt.norms/dc$criticalComplicated_rt.norms
rto_norms = read.csv("data/rtNormsObjs_BYITEM.csv")
co_norms = read.csv("data/complicatedNormsObjs_BYITEM.csv")
d <- read.csv("data/RefComplex35.results",sep="\t",header=TRUE)
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# get in long form
# get trial info
md <- melt(d,id.vars=c("workerid"),
measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
head(md)
summary(md)
summary(geon)
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
md$seq <- with(md, ave(value, workerid, variable, trial, FUN = seq_along))
warnings()
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
whichSubjRemove = 'keepAll'
d <- read.csv("data/RefComplex38.results",sep="\t",header=TRUE)
# remove repeat subjects?
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# melt
md <- melt(d,id.vars=c("workerid"),measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
md$variable <- as.factor(as.character(md$variable))
md$trial <- as.factor(as.character(md$trial))
md$value <- as.factor(as.character(md$value))
md$workerid <- as.factor(as.character(md$workerid))
summary(md)
head(md)
md$seq <- with(md, ave(value, workerid, variable, trial, FUN = seq_along))
md$seq <- with(md, ave(value, workerid, variable, trial, FUN = seq_along))
warnings()
d <- read.csv("data/RefComplex35.results",sep="\t",header=TRUE)
if (whichSubjRemove == 'removeRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$repeatSubj,]
} else if (whichSubjRemove == 'withinRepeatSubj') {
d = merge(d, dups, by=c("hitid","workerid"))
d = d[!d$withinRepeatSubj,]
}
# get in long form
# get trial info
md <- melt(d,id.vars=c("workerid"),
measure.vars=c(names(d)[c(grepl("_",names(d)))]))
md$trial <- matrix(lapply(str_split(md$variable,"_"),function(x) {x[2]}))
md$variable <- as.character(matrix(lapply(str_split(md$variable,"_"),function(x) {x[1]})))
md$variable <- matrix(lapply(str_split(md$variable,"Answer."),function(x) {x[2]}))
